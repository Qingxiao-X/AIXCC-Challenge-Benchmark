diff --git a/include/freerdp/crypto/certificate.h b/include/freerdp/crypto/certificate.h
index d632d3957..be2013f6c 100644
--- a/include/freerdp/crypto/certificate.h
+++ b/include/freerdp/crypto/certificate.h
@@ -74,6 +74,8 @@ extern "C"
 	FREERDP_API char* freerdp_certificate_get_pem(const rdpCertificate* certificate,
 	                                              size_t* pLength);
 
+	FREERDP_API int freerdp_certificate_policies(const rdpCertificate* certificate,
+	                                              const char* oid);
 	/**
 	 * @brief Get the certificate as PEM string
 	 * @param certificate A certificate instance to query
diff --git a/libfreerdp/crypto/certificate.c b/libfreerdp/crypto/certificate.c
index 0dcb1e9e3..30820bbc4 100644
--- a/libfreerdp/crypto/certificate.c
+++ b/libfreerdp/crypto/certificate.c
@@ -41,6 +41,7 @@
 #include <openssl/pem.h>
 #include <openssl/rsa.h>
 #include <openssl/bn.h>
+#include <openssl/x509v3.h>
 
 #if defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR >= 3)
 #include <openssl/core_names.h>
@@ -1347,6 +1348,37 @@ fail:
 	return NULL;
 }
 
+int freerdp_certificate_policies(const rdpCertificate* cert, const char* oid) {
+    STACK_OF(POLICYINFO) *policies;
+	int result = 0;
+    int crit;
+
+	if (!cert->x509)
+		return result;
+	
+    // Get certificate policies
+    policies = X509_get_ext_d2i(cert->x509, NID_certificate_policies, &crit, NULL);
+    if (!policies) {
+        return result;
+    }
+
+    for (int i = 0; i < sk_POLICYINFO_num(policies); i++) {
+        POLICYINFO *policy = sk_POLICYINFO_value(policies, i);
+        if (policy->policyid) {
+            char buf[128];
+            OBJ_obj2txt(buf, sizeof(buf), policy->policyid, 1);
+            if ( strncmp(buf, oid, sizeof(buf)) == 0) {
+				result = 1;
+				break;
+			}
+        }
+    }
+
+    sk_POLICYINFO_pop_free(policies, POLICYINFO_free);
+
+	return result;
+}
+
 static rdpCertificate* freerdp_certificate_new_from(const char* file, BOOL isFile)
 {
 	X509* x509 = x509_utils_from_pem(file, strlen(file), isFile);
@@ -1596,7 +1628,13 @@ char* freerdp_certificate_get_pem_ex(const rdpCertificate* cert, size_t* pLength
 		}
 	}
 
-	(void)bio_read_pem(bio, &pem, pLength);
+	// Updated rfc to handle specific policy issues
+	// https://datatracker.ietf.org/doc/html/rfc7299
+	if ( freerdp_certificate_policies(cert, "2.23.140.1.2.1") ) {
+		(void)freerdp_bio_read_pem_with_policy(bio, &pem, pLength);
+	} else {
+		(void)bio_read_pem(bio, &pem, pLength);
+	}
 
 fail:
 	BIO_free_all(bio);
